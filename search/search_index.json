{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"ex-vi: My Vi GitHub Repository","text":"<p>This repository is dedicated to Bill Joy's ex and vi implementation.</p> <p>I started using Vi on a SINIX  (German/English)  system in 1986 when I worked for the Siemens Research &amp; Development Department in Munich.</p> <p>Up to now Vi - and now Vim - is my preferred choice for file editing in Linux.</p>"},{"location":"documentation.html","title":"Documentation","text":""},{"location":"documentation.html#exvi-manpages","title":"Ex/Vi Manpages","text":"<p>The manpages are created form the nroff code in the  GitHub repository n-t-roff/heirloom-ex-vi.</p> <ul> <li>ex.1</li> <li>vi.1</li> </ul>"},{"location":"documentation.html#my-books","title":"My Books","text":"<p>This books are still on my shelf.</p> Learning the vi Editor - 4th Edition Termcap and Terminfo - 3rd Edition Linda Lamb John Strang, Tim O'Reilly, Linda Mui June 1988 April 1988 O'Reilly &amp; Associates, Inc. O'Reilly &amp; Associates, Inc. ISBN 0-937175-17-X ISBN 0-93717522-6"},{"location":"documentation.html#booksdocuments","title":"Books/Documents","text":"<ul> <li>An Introduction to Display Editing with Vi</li> <li>Learning the vi 5th Ed.</li> <li>Learning the vi and Vim Editors 7th Ed.</li> <li>The Termcap Manual 2nd Ed.</li> </ul>"},{"location":"info/about.html","title":"About this Site","text":"<p>This is my vi related GitHub site. The data are stored in my GitHub repository maroph/ex-vi.</p>"},{"location":"info/about.html#structure-of-this-repository","title":"Structure of this Repository","text":"<ul> <li>docs   Markdown Sourcen of this site</li> <li>LICENSE.md   License of this repository data (CC-BY 4.0)</li> <li>README.md   Repository Readme file</li> <li>mkdocs.yml MkDocs configuration file</li> </ul>"},{"location":"info/gdpr.html","title":"GDPR / DSGVO","text":""},{"location":"info/gdpr.html#global-data-protection-regulation-gdpr","title":"Global Data Protection Regulation (GDPR)","text":"<p>This website does not collect, store or process personally identifiable  information (PII). This website does not require the use of cookies.</p>"},{"location":"info/gdpr.html#datenschutzerklarung-dsgvo","title":"Datenschutzerkl\u00e4rung (DSGVO)","text":"<p>Auf dieser Webseite werden keine personenbezogenen Daten erhoben, gespeichert  oder verarbeitet. Es werden keine Cookies verwendet.</p>"},{"location":"info/gdpr.html#third-part-inclusion","title":"Third Part Inclusion","text":"<p>This website is hosted by GitHub  using GitHub Pages. The GitHub Global Privacy Practices are available  here.</p>"},{"location":"info/gdpr.html#verweise-auf-dritte","title":"Verweise auf Dritte","text":"<p>Diese Website wird auf GitHub als GitHub Pages  gehostet. Die GitHub Global Privacy Practices sind  hier  hinterlegt.</p>"},{"location":"info/license.html","title":"Lizenz","text":"<p> This work is licensed under a  Creative Commons Attribution-ShareAlike 4.0 International License</p>"},{"location":"info/resources.html","title":"Used Resources","text":""},{"location":"info/resources.html#vi-favicon","title":"Vi favicon","text":"<p>The vi favicon is based on the  Vi logo file created by DavidL under a CC BY-SA 4.0 (via Wikimedia Commons).</p>"},{"location":"info/resources.html#pandoc","title":"Pandoc","text":"<p>I converted the Ex/Vi manpages with Pandoc</p> <ul> <li>Pandoc</li> </ul> <p>to Markdown.</p> <pre><code>$ pandoc --from=man --to= markdown -o ex.1.md ex.1\n$ pandoc --from=man --to= markdown -o vi.1.md vi.1\n</code></pre>"},{"location":"info/resources.html#site-creation","title":"Site Creation","text":"<p>My pages are written in Markdown (directory docs) an transformed into HTML  pages (local directory site). The site data are published in the gh-pages  branch.</p> <p>The following Python modules are used to create this site:</p> <ul> <li>MkDocs</li> <li>Material for MkDocs</li> <li>MkDocs plugin mkdocs-git-revision-date-localized-plugin</li> </ul>"},{"location":"software/ex-1.1.html","title":"Ex/Vi 1.1 (01-FEB-1978)","text":"<p>The GitHub repository n-t-roff/ex-1.1  contains the sources of the first ever published Ex/Vi version.</p>"},{"location":"software/ex-1.1.html#local-copy-of-the-sources","title":"Local Copy of the Sources","text":"<ul> <li>ex-1.1-160706.tar.gz</li> </ul>"},{"location":"software/ex-vi.html","title":"The Traditional Vi","text":"<p>Gunnar Ritter created the SourceForge project The Traditional Vi with Vi 3.7 as base and released a version 4.0 (25-MAR-2007).</p> <p>Quote from Gunnar's page:</p> <p>This port of vi has generally preserved the original style, terminal control,  and feature set. It adds support for international character sets, including  multibyte encodings such as UTF-8, and some minor enhancements that were not  present in BSD vi 3.7, but had been included in later vi versions for System V  or in POSIX.2.</p>"},{"location":"software/ex-vi.html#local-copies-of-the-sources-and-documents","title":"Local Copies of the Sources and Documents","text":"<ul> <li>ex-050325.tar.bz2 (sources)</li> <li>viin.tar.gz (tared documents)</li> <li>viin (documents)</li> </ul>"},{"location":"software/ex.1.html","title":"NAME","text":"<p>ex, edit - text editor</p>"},{"location":"software/ex.1.html#synopsis","title":"SYNOPSIS","text":"<p>ex [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRvV] [file ...]</p> <p>edit [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRvV] [file ...]\\</p>"},{"location":"software/ex.1.html#description","title":"DESCRIPTION","text":"<p>Ex is the root of a family of editors: edit, ex and vi. Ex is a superset of ed, with the most notable extension being a display editing facility. Display based editing on</p> <p>terminals is the focus of vi.</p> <p>For those who have not used ed, or for casual users, the editor edit may be convenient. It avoids some of the complexities of ex used mostly by systems programmers and persons very familiar with ed.</p> <p>The following options are accepted:</p> <p>-c command or +command</p> <p>:   Execute command when editing begins.</p> <p>-l</p> <p>:   Start in a special mode useful for the Lisp programming language.</p> <p>-r [filename] or -L</p> <p>:   When no argument is supplied with this option, all files to be     recovered are listed and the editor exits immediately. If a     filename is specified, the corresponding temporary file is opened     in recovery mode.</p> <p>-R</p> <p>:   Files are opened read-only when this option is given.</p> <p>-s or -</p> <p>:   Script mode; all feedback for interactive editing is disabled.</p> <p>and .exrc files are not processed.</p> <p>-t tagstring</p> <p>:   Read the tags file, then choose the file and position specified by     tagstring for editing.</p> <p>-v</p> <p>:   Start in visual mode even if called as ex.</p> <p>-V</p> <p>:   Echo command input to standard error, unless it originates from a     terminal.</p> <p>-w size</p> <p>:   Specify the size of the editing window for visual mode.</p>"},{"location":"software/ex.1.html#file-manipulation","title":"File manipulation","text":"<p>Ex is normally editing the contents of a single file, whose name is recorded in the current file name. Ex performs all editing actions in a buffer (actually a temporary file) into which the text of the file is initially read. Changes made to the buffer have no effect on the file being edited unless and until the buffer contents are written out to the file with a write command. After the buffer contents are written, the previous contents of the written file are no longer accessible. When a file is edited, its name becomes the current file name, and its contents are read into the buffer.</p> <p>The current file is almost always considered to be edited. This means that the contents of the buffer are logically connected with the current file name, so that writing the current buffer contents onto that file, even if it exists, is a reasonable action. If the current file is not edited then ex will not normally write on it if it already exists.</p> <p>For saving blocks of text while editing, and especially when editing more than one file, ex has a group of named buffers. These are similar to the normal buffer, except that only a limited number of operations are available on them. The buffers have names a through z.</p>"},{"location":"software/ex.1.html#exceptional-conditions","title":"Exceptional Conditions","text":"<p>When errors occur ex (optionally) rings the terminal bell and, in any case, prints an error diagnostic. If the primary input is from a file, editor processing will terminate. If an interrupt signal is received, ex prints \"Interrupt\" and returns to its command level. If the primary input is a file, then ex will exit when this occurs.</p> <p>If a hangup signal is received and the buffer has been modified since it was last written out, or if the system crashes, either the editor (in the first case) or the system (after it reboots in the second) will attempt to preserve the buffer. The next time the user logs in he should be able to recover the work he was doing, losing at most a few lines of changes from the last point before the hangup or editor crash. To recover a file one can use the -r option. If one was editing the file resume, then he should change to the directory where he were when the crash occurred, giving the command</p> <p>ex -r resume</p> <p>After checking that the retrieved file is indeed ok, he can write it over the previous contents of that file.</p> <p>The user will normally get mail from the system telling him when a file has been saved after a crash. The command</p> <p>ex -r</p> <p>will print a list of the files which have been saved for the user.</p>"},{"location":"software/ex.1.html#editing-modes","title":"Editing modes","text":"<p>Ex has five distinct modes. The primary mode is command mode. Commands are entered in command mode when a `:\\' prompt is present, and are executed each time a complete line is sent. In text input mode ex gathers input lines and places them in the file. The append, insert, and change commands use text input mode. No prompt is printed when in text input mode. This mode is left by typing a `.\\' alone at the beginning of a line, and command mode resumes.</p> <p>The last three modes are open and visual modes, entered by the commands of the same name, and, within open and visual modes text insertion mode. Open and visual modes allow local editing operations to be performed on the text in the file. The open command displays one line at a time on any terminal while visual works on</p> <p>terminals with random positioning cursors, using the screen as a (single) window for file editing changes. These modes are described (only) in An Introduction to Display Editing with Vi.</p>"},{"location":"software/ex.1.html#command-structure","title":"Command structure","text":"<p>Most command names are English words, and initial prefixes of the words are acceptable abbreviations. The ambiguity of abbreviations is resolved in favor of the more commonly used commands.</p> <p>Most commands accept prefix addresses specifying the lines in the file upon which they are to have effect. The forms of these addresses will be discussed below. A number of commands also may take a trailing count specifying the number of lines to be involved in the command. Thus the command \"10p\" will print the tenth line in the buffer while \"delete 5\" will delete five lines from the buffer, starting with the current line.</p> <p>Some commands take other information or parameters, this information always being given after the command name.</p> <p>A number of commands have two distinct variants. The variant form of the command is invoked by placing an `!\\' immediately after the command name. Some of the default variants may be controlled by options; in this case, the `!\\' serves to toggle the default.</p> <p>The characters `#\\', `p\\' and `l\\' may be placed after many commands (A `p\\' or `l\\' must be preceded by a blank or tab except in the single special case `dp\\'). In this case, the command abbreviated by these characters is executed after the command completes. Since ex normally prints the new current line after each change, `p\\' is rarely necessary. Any number of `+\\' or `-\\' characters may also be given with these flags. If they appear, the specified offset is applied to the current line value before the printing command is executed.</p> <p>It is possible to give editor commands which are ignored. This is useful when making complex editor scripts for which comments are desired. The comment character is the double quote: \\\". Any command line beginning with \\\" is ignored. Comments beginning with \\\" may also be placed at the ends of commands, except in cases where they could be confused as part of text (shell escapes and the substitute and map commands).</p> <p>More than one command may be placed on a line by separating each pair of commands by a `|\\' character. However the global commands, comments, and the shell escape `!\\' must be the last command on a line, as they are not terminated by a `|\\'.</p>"},{"location":"software/ex.1.html#command-addressing","title":"Command addressing","text":"<p>.</p> <p>:   The current line. Most commands leave the current line as the last     line which they affect. The default address for most commands is the     current line, thus `.\\' is rarely used alone as an address.</p> <p>n.  The nth line in the editor\\'s buffer, lines being numbered     sequentially from 1.</p> <p>\\$</p> <p>:   The last line in the buffer.</p> <p>\\%</p> <p>:   An abbreviation for \"1,\\$\", the entire buffer.</p> <p>+n -n</p> <p>:   An offset relative to the current buffer line. The forms `.+3\\'     `+3\\' and `+++\\' are all equivalent; if the current line is line     100 they all address line 103.</p> <p>/pat/ ?pat?</p> <p>:   Scan forward and backward respectively for a line containing pat,     a regular expression (as defined below). The scans normally wrap     around the end of the buffer. If all that is desired is to print the     next line containing pat, then the trailing / or ? may be     omitted. If pat is omitted or explicitly empty, then the last     regular expression specified is located. The forms \\/ and     \\? scan using the last regular expression used in a scan; after     a substitute // and ?? would scan using the substitute\\'s     regular expression.</p> <p>\u00b4\u00b4 \u00b4x</p> <p>:   Before each non-relative motion of the current line `.\\', the     previous current line is marked with a tag, subsequently referred to     as `\u00b4\u00b4\\'. This makes it easy to refer or return to this previous     context. Marks may also be established by the mark command, using     single lower case letters x and the marked lines referred to as     `\u00b4x\\'.</p> <p>Addresses to commands consist of a series of addressing primitives, separated by `,\\' or `;\\'. Such address lists are evaluated left-to-right. When addresses are separated by `;\\' the current line `.\\' is set to the value of the previous addressing expression before the next address is interpreted. If more addresses are given than the command requires, then all but the last one or two are ignored. If the command takes two addresses, the first addressed line must precede the second in the buffer.</p> <p>Null address specifications are permitted in a list of addresses, the default in this case is the current line `.\\'; thus `,100\\' is equivalent to `.,100\\'. It is an error to give a prefix address to a command which expects none.</p>"},{"location":"software/ex.1.html#command-descriptions","title":"Command descriptions","text":"<p>The following form is a prototype for all ex commands:</p> <p>address command ! parameters count flags</p> <p>All parts are optional; the degenerate case is the empty command which prints the next line in the file. For sanity with use from within visual mode, ex ignores a \":\" preceding any command.</p> <p>In the following command descriptions, the default addresses are shown in parentheses, which are not, however, part of the command.</p> <p>abbreviate word rhs abbr: ab</p> <p>:   Add the named abbreviation to the current list. When in input mode     in visual, if word is typed as a complete word, it will be changed     to rhs .</p> <p>( . ) append abbr: a\\ text\\ .</p> <p>Reads the input text and places it after the specified line. After the command, `.\\' addresses the last line input or the specified line if no lines were input. If address `0\\' is given, text is placed at the beginning of the buffer.</p> <p>a!\\ text\\ .</p> <p>The variant flag to append toggles the setting for the autoindent option during the input of text.</p> <p>args</p> <p>:   The members of the argument list are printed, with the current     argument delimited by `[\\' and `]\\'.</p> <p>cd directory</p> <p>:   The cd command is a synonym for chdir.</p> <p>( . , . ) change count abbr: c\\ text\\ .</p> <p>Replaces the specified lines with the input text. The current line becomes the last line input; if no lines were input it is left as for a delete.</p> <p>c!\\ text\\ .</p> <p>The variant toggles autoindent during the change.</p> <p>chdir directory</p> <p>:   The specified directory becomes the current directory. If no     directory is specified, the current value of the home option is     used as the target directory. After a chdir the current file is     not considered to have been edited so that write restrictions on     pre-existing files apply.</p> <p>( . , . )\u2006copy addr flags abbr: co</p> <p>:   A copy of the specified lines is placed after addr, which may be     `0\\'. The current line `.\\' addresses the last line of the     copy. The command t is a synonym for copy.</p> <p>( . , . )\u2006delete buffer count flags abbr: d</p> <p>:   Removes the specified lines from the buffer. The line after the last     line deleted becomes the current line; if the lines deleted were     originally at the end, the new last line becomes the current line.     If a named buffer is specified by giving a letter, then the     specified lines are saved in that buffer, or appended to it if an     upper case letter is used.</p> <p>edit file abbr: e\\ ex file</p> <p>Used to begin an editing session on a new file. The editor first checks to see if the buffer has been modified since the last write command was issued. If it has been, a warning is issued and the command is aborted. The command otherwise deletes the entire contents of the editor buffer, makes the named file the current file and prints the new filename. After insuring that this file is sensible (i.e., that it is not a binary file such as a directory, a block or character special file other than /dev/tty, a terminal, or a binary or executable file), the editor reads the file into its buffer.</p> <p>If the read of the file completes without error, the number of lines and characters read is typed. Any null characters in the file are discarded. If none of these errors occurred, the file is considered edited. If the last line of the input file is missing the trailing newline character, it will be supplied and a complaint will be issued. This command leaves the current line `.\\' at the last line read. If executed from within open or visual, the current line is initially the first line of the file.</p> <p>e! file</p> <p>:   The variant form suppresses the complaint about modifications having     been made and not written from the editor buffer, thus discarding     all changes which have been made before editing the new file.</p> <p>e +n file</p> <p>:   Causes the editor to begin at line n rather than at the last line;     n may also be an editor command containing no spaces, e.g.:     \"+/pat\".</p> <p>file abbr: f</p> <p>:   Prints the current file name, whether it has been `[Modified]\\'     since the last write command, whether it is read only , the     current line, the number of lines in the buffer, and the percentage     of the way through the buffer of the current line. In the rare case     that the current file is `[Not edited]\\' this is noted also; in     this case one has to use the form w! to write to the file, since     the editor is not sure that a write will not destroy a file     unrelated to the current contents of the buffer.</p> <p>file file</p> <p>:   The current file name is changed to file which is considered     `[Not edited]\\'.</p> <p>( 1 , \\$ ) global /pat\u2006/ cmds abbr: g</p> <p>:   First marks each line among those specified which matches the given     regular expression. Then the given command list is executed with     `.\\' initially set to each marked line.</p> <pre><code>The command list consists of the remaining commands on the current\ninput line and may continue to multiple lines by ending all but the\nlast such line with a \\`\\\\\\'. If *cmds* (and possibly the trailing\n**/** delimiter) is omitted, each line matching *pat* is printed.\n*Append,* *insert,* and *change* commands and associated input are\npermitted; the \\`**.**\\' terminating input may be omitted if it\nwould be on the last line of the command list. *Open* and *visual*\ncommands are permitted in the command list and take input from the\nterminal.\n\nThe *global* command itself may not appear in *cmds.* The *undo*\ncommand is also not permitted there, as *undo* instead can be used\nto reverse the entire *global* command. The options *autoprint* and\n*autoindent* are inhibited during a *global,* (and possibly the\ntrailing **/** delimiter) and the value of the *report* option is\ntemporarily infinite, in deference to a *report* for the entire\nglobal. Finally, the context mark \\`\\'\\'\\' is set to the value of\n\\`.\\' before the global command begins and is not changed during a\nglobal command, except perhaps by an *open* or *visual* within the\n*global.*\n</code></pre> <p>g! /pat/ cmds abbr: v</p> <p>:   The variant form of global runs cmds at each line not matching     pat.</p> <p>( . )\u2006insert abbr: i\\ text\\ .</p> <p>Places the given text before the specified line. The current line is left at the last line input; if there were none input it is left at the line before the addressed line. This command differs from append only in the placement of text.</p> <p>i!\\ text\\ .</p> <p>The variant toggles autoindent during the insert.</p> <p>( . , .+1 ) join count flags abbr: j</p> <p>:   Places the text from a specified range of lines together on one     line. White space is adjusted at each junction to provide at least     one blank character, two if there was a `.\\' at the end of the     line, or none if the first following character is a `)\\'. If there     is already white space at the end of the line, then the white space     at the start of the next line will be discarded.</p> <p>j!</p> <p>:   The variant causes a simpler join with no white space processing;     the characters in the lines are simply concatenated.</p> <p>( . ) k x</p> <p>:   The k command is a synonym for mark. It does not require a blank     or tab before the following letter.</p> <p>( . , . ) list count flags</p> <p>:   Prints the specified lines in a more unambiguous way: tabs are     printed as `\\^I\\' and the end of each line is marked with a     trailing `\\$\\'. The current line is left at the last line printed.</p> <p>map[!] lhs rhs</p> <p>:   The map command is used to define macros for use in visual     command mode. Lhs should be a single character, or the sequence     \"#n\", for n a digit, referring to function key n. When this     character or function key is typed in visual mode, it will be as     though the corresponding rhs had been typed. On terminals without     function keys, the user can type \"#n\". If the `!\\' character     follows the command name, the mapping is interpreted in input mode.     See section 6.9 of the \"Introduction to Display Editing with Vi\" for     more details.</p> <p>( . ) mark x</p> <p>:   Gives the specified line mark x, a single lower case letter. The     x must be preceded by a blank or a tab. The addressing form     `\\'x\\' then addresses this line. The current line is not affected     by this command.</p> <p>( . , . ) move addr abbr: m</p> <p>:   The move command repositions the specified lines to be after addr     . The first of the moved lines becomes the current line.</p> <p>next abbr: n</p> <p>:   The next file from the command line argument list is edited.</p> <p>n!</p> <p>:   The variant suppresses warnings about the modifications to the     buffer not having been written out, discarding (irretrievably) any     changes which may have been made.</p> <p>n filelist\\ n +command filelist</p> <p>The specified filelist is expanded and the resulting list replaces the current argument list; the first file in the new list is then edited. If command is given (it must contain no spaces), then it is executed after editing the first such file.</p> <p>( . , . ) number count flags abbr: # or nu</p> <p>:   Prints each specified line preceded by its buffer line number. The     current line is left at the last line printed.</p> <p>( . ) open flags abbr: o\\ ( . ) open /pat\u2006/ flags</p> <p>Enters intraline editing open mode at each addressed line. If pat is given, then the cursor will be placed initially at the beginning of the string matched by the pattern. To exit this mode use Q. See An Introduction to Display Editing with Vi for more details.</p> <p>preserve</p> <p>:   The current editor buffer is saved as though the system had just     crashed. This command is for use only in emergencies when a write     command has resulted in an error.</p> <p>( . , . )\u2006print count abbr: p or P</p> <p>:   Prints the specified lines with non-printing characters printed as     control characters `\\^x\u2006\\'; delete (octal 177) is represented as     `\\^?\\'. The current line is left at the last line printed.</p> <p>( . )\u2006put buffer abbr: pu</p> <p>:   Puts back previously deleted or yanked lines. Normally used with     delete to effect movement of lines, or with yank to effect     duplication of lines. If no buffer is specified, then the last     deleted or yanked text is restored. But no modifying commands     may intervene between the delete or yank and the put, nor may     lines be moved between files without using a named buffer. By using     a named buffer, text may be restored that was saved there at any     previous time.</p> <p>quit abbr: q</p> <p>:   Causes ex to terminate. No automatic write of the editor buffer to     a file is performed. However, ex issues a warning message if the     file has changed since the last write command was issued, and does     not quit. Ex will also issue a diagnostic if there are more     files in the argument list.</p> <p>Normally, the user will wish to save his changes, and he should give a write command; if he wishes to discard them, he should the q! command variant.</p> <p>q!</p> <p>:   Quits from the editor, discarding changes to the buffer without     complaint.</p> <p>( . ) read file abbr: r</p> <p>:   Places a copy of the text of the given file in the editing buffer     after the specified line. If no file is given the current file     name is used. The current file name is not changed unless there is     none in which case file becomes the current name. The sensibility     restrictions for the edit command apply here also. If the file     buffer is empty and there is no current name then ex treats this     as an edit command.</p> <pre><code>Address \\`0\\' is legal for this command and causes the file to be\nread at the beginning of the buffer. Statistics are given as for the\n*edit* command when the *read* successfully terminates. After a\n*read* the current line is the last line read. Within *open* and\n*visual* the current line is set to the first line read rather than\nthe last.\n</code></pre> <p>( . ) read !command</p> <p>:   Reads the output of the command command into the buffer after the     specified line. This is not a variant form of the command, rather a     read specifying a command rather than a filename; a blank or tab     before the ! is mandatory.</p> <p>recover file</p> <p>:   Recovers file from the system save area. Used after a accidental     hangup of the phone or a system crash or preserve command. Except     when preserve is used, the user will be notified by mail when a     file is saved.</p> <p>rewind abbr: rew</p> <p>:   The argument list is rewound, and the first file in the list is     edited.</p> <p>rew!</p> <p>:   Rewinds the argument list discarding any changes made to the current     buffer.</p> <p>set parameter</p> <p>:   With no arguments, prints those options whose values have been     changed from their defaults; with parameter all it prints all of     the option values.</p> <pre><code>Giving an option name followed by a \\`?\\' causes the current value\nof that option to be printed. The \\`?\\' is unnecessary unless the\noption is Boolean valued. Boolean options are given values either by\nthe form \\`set *option*\\' to turn them on or \\`set no*option*\\' to\nturn them off; string and numeric options are assigned via the form\n\\`set *option*=value\\'.\n\nMore than one parameter may be given to *set \u2006;* they are\ninterpreted left-to-right.\n\nA list of options can be found below.\n</code></pre> <p>shell abbr: sh</p> <p>:   A new shell is created. When it terminates, editing resumes.</p> <p>source file abbr: so</p> <p>:   Reads and executes commands from the specified file. Source     commands may be nested.</p> <p>( . , . ) substitute /pat\u2006/repl\u2006/ options count flags</p> <p>abbr: s\\</p> <p>On each specified line, the first instance of pattern pat is replaced by replacement pattern repl. If the global indicator option character `g\\' appears, then all instances are substituted; if the confirm indication character `c\\' appears, then before each substitution the line to be substituted is typed with the string to be substituted marked with `\\^\\' characters. By typing an `y\\' one can cause the substitution to be performed, any other input causes no change to take place. After a substitute the current line is the last line substituted.</p> <p>Lines may be split by substituting new-line characters into them. The newline in repl must be escaped by preceding it with a `\\\\'. Other metacharacters available in pat and repl are described below.</p> <p>stop</p> <p>:   Suspends the editor, returning control to the top level shell. If     autowrite is set and there are unsaved changes, a write is done     first unless the form stop ! is used. This commands is only     available where supported by the teletype driver, shell and     operating system.</p> <p>( . , . ) substitute options count flags abbr: s</p> <p>:   If pat and repl are omitted, then the last substitution is     repeated. This is a synonym for the &amp; command.</p> <p>( . , . ) t addr flags</p> <p>:   The t command is a synonym for copy .</p> <p>ta tag</p> <p>:   The focus of editing switches to the location of tag, switching to     a different line in the current file where it is defined, or if     necessary to another file.</p> <pre><code>The tags file is normally created by a program such as *ctags,* and\nconsists of a number of lines with three fields separated by blanks\nor tabs. The first field gives the name of the tag, the second the\nname of the file where the tag resides, and the third gives an\naddressing form which can be used by the editor to find the tag;\nthis field is usually a contextual scan using \\`/*pat*/\\' to be\nimmune to minor changes in the file. Such scans are always performed\nas if *nomagic* was set.\n\nThe tag names in the tags file must be sorted alphabetically.\n</code></pre> <p>unabbreviate word abbr: una</p> <p>:   Delete word from the list of abbreviations.</p> <p>undo abbr: u</p> <p>:   Reverses the changes made in the buffer by the last buffer editing     command. Note that global commands are considered a single command     for the purpose of undo (as are open and visual.) Also, the     commands write and edit which interact with the file system     cannot be undone. Undo is its own inverse.</p> <pre><code>*Undo* always marks the previous value of the current line \\`**.**\\'\nas \\`\\'\\'\\'. After an *undo* the current line is the first line\nrestored or the line before the first line deleted if no lines were\nrestored. For commands with more global effect such as *global* and\n*visual* the current line regains it\\'s pre-command value after an\n*undo.*\n</code></pre> <p>unmap[!] lhs</p> <p>:   The macro expansion associated by map for lhs is removed.</p> <p>( 1 , \\$ ) v /pat\u2006/ cmds</p> <p>:   A synonym for the global command variant g!, running the     specified cmds on each line which does not match pat.</p> <p>version abbr: ve</p> <p>:   Prints the current version number of the editor as well as the date     the editor was last changed.</p> <p>( . ) visual type count flags abbr: vi</p> <p>:   Enters visual mode at the specified line. Type is optional and may     be `-\\' , `\\^\\' or `.\\' as in the z command to specify the     placement of the specified line on the screen. By default, if type     is omitted, the specified line is placed as the first on the screen.     A count specifies an initial window size; the default is the value     of the option window. See the document An Introduction to Display     Editing with Vi for more details. To exit this mode, type Q.</p> <p>visual file\\ visual +n file</p> <p>From visual mode, this command is the same as edit.</p> <p>( 1 , \\$ ) write file abbr: w</p> <p>:   Writes changes made back to file, printing the number of lines and     characters written. Normally file is omitted and the text goes     back where it came from. If a file is specified, then text will be     written to that file. If the file does not exist it is created. The     current file name is changed only if there is no current file name;     the current line is never changed.</p> <pre><code>If an error occurs while writing the current and *edited* file, the\neditor considers that there has been \"No write since last change\"\neven if the buffer had not previously been modified.\n</code></pre> <p>( 1 , \\$ ) write&gt;&gt; file abbr: w&gt;&gt;</p> <p>:   Writes the buffer contents at the end of an existing file.</p> <pre><code>&lt;!-- --&gt;\n</code></pre> <p>w! name</p> <p>:   Overrides the checking of the normal write command, and will write     to any file which the system permits.</p> <p>( 1 , \\$ ) w !command</p> <p>:   Writes the specified lines into command. Note the difference     between w! which overrides checks and w ! which writes to a     command.</p> <p>wq name</p> <p>:   Like a write and then a quit command.</p> <p>wq! name</p> <p>:   The variant overrides checking on the sensibility of the write     command, as w! does.</p> <p>xit name</p> <p>:   If any changes have been made and not written to any file, writes     the buffer out. Then, in any case, quits.</p> <p>( . , . )\u2006yank buffer count abbr: ya</p> <p>:   Places the specified lines in the named buffer, for later     retrieval via put. If no buffer name is specified, the lines go to     a more volatile place; see the put command description.</p> <p>( .+1 ) z count</p> <p>:   Print the next count lines, default window.</p> <p>( . ) z type count</p> <p>:   Prints a window of text with the specified line at the top. If     type is `-\\' the line is placed at the bottom; a `.\\' causes     the line to be placed in the center. A count gives the number of     lines to be displayed rather than double the number specified by the     scroll option. On a CRT the screen is cleared before display     begins unless a count which is less than the screen size is given.     The current line is left at the last line printed. Forms `z=\\' and     `z\\^\\' also exist; `z=\\' places the current line in the center,     surrounds it with lines of `-\\' characters and leaves the current     line at this line. The form `z\\^\\' prints the window before `z-\\'     would. The characters `+\\', `\\^\\' and `-\\' may be repeated for     cumulative effect.</p> <p>! command</p> <p>:   The remainder of the line after the `!\\' character is sent to a     shell to be executed. Within the text of command the characters     `%\\' and `#\\' are expanded as in filenames and the character `!\\'     is replaced with the text of the previous command. Thus, in     particular, `!!\\' repeats the last such shell escape. If any such     expansion is performed, the expanded line will be echoed. The     current line is unchanged by this command.</p> <pre><code>If there has been \"\\[No write\\]\" of the buffer contents since the\nlast change to the editing buffer, then a diagnostic will be printed\nbefore the command is executed as a warning. A single \\`!\\' is\nprinted when the command completes.\n</code></pre> <p>( addr , addr ) ! command</p> <p>:   Takes the specified address range and supplies it as standard input     to command; the resulting output then replaces the input lines.</p> <p>( \\$ ) =</p> <p>:   Prints the line number of the addressed line. The current line is     unchanged.</p> <p>( . , . ) &gt; count flags\\ ( . , . ) \\&lt; count flags</p> <p>Perform intelligent shifting on the specified lines; \\&lt; shifts left and &gt; shift right. The quantity of shift is determined by the shiftwidth option and the repetition of the specification character. Only white space (blanks and tabs) is shifted; no non-white characters are discarded in a left-shift. The current line becomes the last line which changed due to the shifting.</p> <p>\\^D</p> <p>:   An end-of-file from a terminal input scrolls through the file. The     scroll option specifies the size of the scroll, normally a half     screen of text.</p> <p>( .+1 , .+1 )\\ ( .+1 , .+1 ) |</p> <p>An address alone causes the addressed lines to be printed. A blank line prints the next line in the file.</p> <p>( . , . ) &amp; options count flags</p> <p>:   Repeats the previous substitute command.</p> <p>( . , . ) \\~ options count flags</p> <p>:   Replaces the previous regular expression with the previous     replacement pattern from a substitution.</p>"},{"location":"software/ex.1.html#regular-expressions","title":"Regular expressions","text":"<p>A regular expression specifies a set of strings of characters. A member of this set of strings is said to be matched by the regular expression. Ex remembers two previous regular expressions: the previous regular expression used in a substitute command and the previous regular expression used elsewhere (referred to as the previous scanning regular expression.) The previous regular expression can always be referred to by a null re, e.g. `//\\' or `??\\'.</p> <p>The following basic constructs are used to construct magic mode regular expressions.</p> <p>char</p> <p>:   An ordinary character matches itself. The characters `\\^\\' at     the beginning of a line, `\\$\\' at the end of line, `*\\'     as any character other than the first, `.\\', `\\\\',     `[\\', and `\\~\\' are not ordinary characters and must be     escaped (preceded) by `\\\\' to be treated as such.</p> <p>\\^</p> <p>:   At the beginning of a pattern forces the match to succeed only at     the beginning of a line.</p> <p>\\$</p> <p>:   At the end of a regular expression forces the match to succeed only     at the end of the line.</p> <p>.</p> <p>:   Matches any single character except the new-line character.</p> <p>\\\\&lt;</p> <p>:   Forces the match to occur only at the beginning of a \"variable\" or     \"word\"; that is, either at the beginning of a line, or just before a     letter, digit, or underline and after a character not one of these.</p> <p>\\&gt;</p> <p>:   Similar to `\\\\&lt;\\', but matching the end of a \"variable\" or \"word\",     i.e. either the end of the line or before character which is neither     a letter, nor a digit, nor the underline character.</p> <p>[string]</p> <p>:   Matches any (single) character in the class defined by string.     Most characters in string define themselves.\\     A pair of characters separated by `-\\' in string defines the     set of characters collating between the specified lower and upper     bounds, thus `[a-z]\\' as a regular expression matches any     (single)</p> <p>lower-case letter.\\ If the sequence `[:class:]\\' appears in string, where class is one of `alnum\\', `alpha\\', `blank\\', `cntrl\\', `digit\\', `graph\\', `lower\\', `print\\', `punct\\', `space\\', `upper\\', `xdigit\\', or a locale-specific character class, all characters that belong to the given class are matched. Thus `[[:lower:]]\\' matches any lower-case letter, possibly including characters beyond the scope of</p> <p>\\ If the first character of string is an `\\^\\' then the construct matches those characters which it otherwise would not; thus `[\\^a-z]\\' matches anything but an</p> <p>lower-case letter (and of course a newline).\\ Backslash `\\\\' is interpreted as an escape character. To place a `\\\\' character in string, write it twice: `\\\\\\'; to place any of the characters `\\^\\', `[\\', or `-\\' in string, you escape them with a preceding `\\\\'.\\ Characters also lose their special meaning by position: `\\^\\' is an ordinary character unless immediately following the initial `[\\', `]\\' is an ordinary character if immediately following the initial `[\\' (or `\\^\\', if present), and `-\\' is an ordinary character if placed immediately behind `[\\' or `\\^\\', or before \\']\\'.</p> <p>The concatenation of two regular expressions matches the leftmost and then longest string which can be divided with the first piece matching the first regular expression and the second piece matching the second.</p> <p>A regular expression may be enclosed between the sequences `\\(\\' and `\\)\\', which matches whatever the enclosed expression matches.</p> <p>Any of the (single character matching) regular expressions mentioned above or a regular expression surrounded by `\\(\\' and \\'\\)\\' may be followed by the character `*\\' to form a regular expression which matches any number of adjacent occurrences (including 0) of characters matched by the regular expression it follows.</p> <p>A single character regular expression or a regular expression surrounded by `\\(\\' and \\'\\)\\' followed by `\\{m,n\\}\\' matches a sequence of m through n occurences, inclusive, of the single character expression. The values of m and n must be non-negative and smaller than 255. The form `\\{m\\}\\' matches exactly m occurences, `\\{m,\\}\\' matches at least m occurences.</p> <p>The character `\\~\\' may be used in a regular expression, and matches the text which defined the replacement part of the last substitute command.</p> <p>The sequence `\\n\\' matches the text that was matched by the n-th regular subexpression enclosed between `\\(\\' and `\\)\\' earlier in the expression.</p>"},{"location":"software/ex.1.html#substitute-replacement-patterns","title":"Substitute replacement patterns","text":"<p>The basic metacharacters for the replacement pattern are `&amp;\\', `\\~\\', and `#\\'; the first two of them are given as `\\&amp;\\' and `\\\\~\\' when nomagic is set. Each instance of `&amp;\\' is replaced by the characters which the regular expression matched. The metacharacter `\\~\\' stands, in the replacement pattern, for the defining text of the previous replacement pattern. If the entire replacement pattern is `#\\', the defining text of the previous replacement pattern is used.</p> <p>Other metasequences possible in the replacement pattern are always introduced by the escaping character `\\\\'. The sequence `\\n\\' is replaced by the text matched by the n-th regular subexpression enclosed between `\\(\\' and `\\)\\'. When nested, parenthesized subexpressions are present, n is determined by counting occurrences of `\\(\\' starting from the left. The sequences `\\u\\' and `\\l\\' cause the immediately following character in the replacement to be converted to upper- or lower-case respectively if this character is a letter. The sequences `\\U\\' and `\\L\\' turn such conversion on, either until `\\E\\' or `\\e\\' is encountered, or until the end of the replacement pattern.</p>"},{"location":"software/ex.1.html#option-descriptions","title":"Option descriptions","text":"<p>autoindent, ai default: noai</p> <p>:   Can be used to ease the preparation of structured program text. At     the beginning of each append , change or insert command or     when a new line is opened or created by an append , change , insert , or substitute operation within open or visual mode,     ex looks at the line being appended after, the first line changed     or the line inserted before and calculates the amount of white space     at the start of the line. It then aligns the cursor at the level of     indentation so determined.</p> <pre><code>If the user then types lines of text in, they will continue to be\njustified at the displayed indenting level. If more white space is\ntyped at the beginning of a line, the following line will start\naligned with the first non-white character of the previous line. To\nback the cursor up to the preceding tab stop one can hit **\\^D**.\nThe tab stops going backwards are defined at multiples of the\n*shiftwidth* option. The user *cannot* backspace over the indent,\nexcept by sending an end-of-file with a **\\^D**.\n\nSpecially processed in this mode is a line with no characters added\nto it, which turns into a completely blank line (the white space\nprovided for the *autoindent* is discarded.) Also specially\nprocessed in this mode are lines beginning with an \\`\\^\\' and\nimmediately followed by a **\\^D**. This causes the input to be\nrepositioned at the beginning of the line, but retaining the\nprevious indent for the next line. Similarly, a \\`0\\' followed by a\n**\\^D** repositions at the beginning but without retaining the\nprevious indent.\n\n*Autoindent* doesn\\'t happen in *global* commands or when the input\nis not a terminal.\n</code></pre> <p>autoprint, ap default: ap</p> <p>:   Causes the current line to be printed after each delete , copy , join , move , substitute , t , undo or shift command. This     has the same effect as supplying a trailing `p\\' to each such     command. Autoprint is suppressed in globals, and only applies to     the last of many commands on a line.</p> <p>autowrite, aw default: noaw</p> <p>:   Causes the contents of the buffer to be written to the current file     if the user has modified it and gives a next, rewind, stop, tag, or ! command, or a \\^\\^ (switch files) or \\^] (tag     goto) command in visual. Note, that the edit and ex commands     do not autowrite. In each case, there is an equivalent way of     switching when autowrite is set to avoid the autowrite (edit for     next , rewind! for .I rewind , stop! for stop , tag! for     tag , shell for ! , and :e # and a :ta! command from     within visual).</p> <p>beautify, bf default: nobeautify</p> <p>:   Causes all control characters except tab, newline and form-feed to     be discarded from the input. A complaint is registered the first     time a backspace character is discarded. Beautify does not apply     to command input.</p> <p>directory, dir default: dir=/tmp</p> <p>:   Specifies the directory in which ex places its buffer file. If     this directory in not writable, then the editor will exit abruptly     when it fails to be able to create its buffer there.</p> <p>edcompatible default: noedcompatible</p> <p>:   Causes the presence of absence of g and c suffixes on     substitute commands to be remembered, and to be toggled by repeating     the suffices. The suffix r makes the substitution be as in the     \\~ command, instead of like &amp;.</p> <p>errorbells, eb default: noeb</p> <p>:   Error messages are preceded by a bell. Bell ringing in open and     visual on errors is not suppressed by setting noeb. If possible     the editor always places the error message in a standout mode of the     terminal (such as inverse video) instead of ringing the bell.</p> <p>exrc default: noexrc</p> <p>:   If set, the current directory is searched for a .exrc file on     startup. If this file is found, its content is treated as ex     commands and executed immediately after the contents of     \\$HOME/.exrc on startup.</p> <p>flash, fl default: flash</p> <p>:   If the terminal provides the \"visual bell\" capability, ex will use     it instead of the audible bell if flash is set.</p> <p>hardtabs, ht default: ht=8</p> <p>:   Gives the boundaries on which terminal hardware tabs are set (or on     which the system expands tabs).</p> <p>ignorecase, ic default: noic</p> <p>:   All upper case characters in the text are mapped to lower case in     regular expression matching. In addition, all upper case characters     in regular expressions are mapped to lower case except in character     class specifications.</p> <p>lisp default: nolisp</p> <p>:   Autoindent indents appropriately for lisp code, and the ( ) {     } [[ and ]] commands in open and visual are modified     to have meaning for lisp.</p> <p>list default: nolist</p> <p>:   All printed lines will be displayed (more) unambiguously, showing     tabs and end-of-lines as in the list command.</p> <p>magic default: magic for ex and vi, Nomagic for edit.</p> <p>:   If nomagic is set, the number of regular expression metacharacters     is greatly reduced, with only `\\^\\' and `\\$\\' having special     effects. In addition the metacharacters `\\~\\' and `&amp;\\' of the     replacement pattern are treated as normal characters. All the normal     metacharacters may be made magic when nomagic is set by     preceding them with a `\\\\'.</p> <p>mesg default: mesg</p> <p>:   Causes write permission to be turned off to the terminal while the     user is in visual mode, if nomesg is set.</p> <p>modelines, ml default: nomodelines</p> <p>:   If modelines is set, then the first 5 lines and the last five     lines of the file will be checked for ex command lines and the     comands issued. To be recognized as a command line, the line must     have the string ex: or vi: in it. This string may be     anywhere in the line and anything after the : is interpeted as     editor commands. This option defaults to off because of unexpected     behavior when editting files such as /etc/passwd.</p> <p>number, nu default: nonumber</p> <p>:   Causes all output lines to be printed with their line numbers. In     addition each input line will be prompted for by supplying the line     number it will have.</p> <p>open default: open</p> <p>:   If noopen, the commands open and visual are not permitted.</p> <p>optimize, opt default: optimize</p> <p>:   Throughput of text is expedited by setting the terminal to not do     automatic carriage returns when printing more than one (logical)     line of output, greatly speeding output on terminals without     addressable cursors when text with leading white space is printed.</p> <p>paragraphs, para default: para=IPLPPPQPP\u2007LIbp</p> <p>:   Specifies the paragraphs for the { and } operations in     open and visual. The pairs of characters in the option\\'s value     are the names of the macros which start paragraphs.</p> <p>prompt default: prompt</p> <p>:   Command mode input is prompted for with a `:\\'.</p> <p>redraw default: noredraw</p> <p>:   The editor simulates (using great amounts of output), an intelligent     terminal on a dumb terminal (e.g. during insertions in visual the     characters to the right of the cursor position are refreshed as each     input character is typed.) Useful only at very high speed.</p> <p>remap default: remap</p> <p>:   If on, macros are repeatedly tried until they are unchanged. For     example, if o is mapped to O , and O is mapped to I     , then if remap is set, o will map to I , but if     noremap is set, it will map to O .</p> <p>report default: report=5, 2 for edit.</p> <p>:   Specifies a threshold for feedback from commands. Any command which     modifies more than the specified number of lines will provide     feedback as to the scope of its changes. For commands such as     global , open , undo , and visual which have potentially     more far reaching scope, the net change in the number of lines in     the buffer is presented at the end of the command, subject to this     same threshold. Thus notification is suppressed during a global     command on the individual commands performed.</p> <p>scroll default: scroll=\u00bd window</p> <p>:   Determines the number of logical lines scrolled when an end-of-file     is received from a terminal input in command mode, and the number of     lines printed by a command mode z command (double the value of     scroll ).</p> <p>sections default: sections=SHNHH\u2007HU</p> <p>:   Specifies the section macros for the [[ and ]]     operations in open and visual. The pairs of characters in the     options\\'s value are the names of the macros which start paragraphs.</p> <p>shell, sh default: sh=/bin/sh</p> <p>:   Gives the path name of the shell forked for the shell escape command     `!\\', and by the shell command. The default is taken from SHELL     in the environment, if present.</p> <p>shiftwidth, sw default: sw=8</p> <p>:   Gives the width a software tab stop, used in reverse tabbing with     \\^D when using autoindent to append text, and by the shift     commands.</p> <p>showmatch, sm default: nosm</p> <p>:   In open and visual mode, when a ) or } is typed, move     the cursor to the matching ( or { for one second if this     matching character is on the screen. Extremely useful with lisp.</p> <p>showmode, smd default: nosmd</p> <p>:   In visual mode, show a description of the current editing mode in     the window\\'s lower right corner.</p> <p>slowopen, slow terminal dependent</p> <p>:   Affects the display algorithm used in visual mode, holding off     display updating during input of new text to improve throughput when     the terminal in use is both slow and unintelligent. See An     Introduction to Display Editing with Vi for more details.</p> <p>tabstop, ts default: ts=8</p> <p>:   The editor expands tabs in the input file to be on tabstop     boundaries for the purposes of display.</p> <p>taglength, tl default: tl=0</p> <p>:   Tags are not significant beyond this many characters. A value of     zero (the default) means that all characters are significant.</p> <p>tags default: tags=tags /usr/lib/tags</p> <p>:   A path of files to be used as tag files for the tag command. A     requested tag is searched for in the specified files, sequentially.     By default, files called tags are searched for in the current     directory and in /usr/lib (a master file for the entire system).</p> <p>term from environment TERM</p> <p>:   The terminal type of the output device.</p> <p>terse default: noterse</p> <p>:   Shorter error diagnostics are produced for the experienced user.</p> <p>warn default: warn</p> <p>:   Warn if there has been `[No write since last change]\\' before a     `!\\' command escape.</p> <p>window default: window=speed dependent</p> <p>:   The number of lines in a text window in the visual command. The     default is 8 at slow speeds (600 baud or less), 16 at medium speed     (1200 baud), and the full screen (minus one line) at higher speeds.</p> <p>w300, w1200, w9600</p> <p>:   These are not true options but set window only if the speed is     slow (300), medium (1200), or high (9600), respectively. They are     suitable for an EXINIT and make it easy to change the 8/16/full     screen rule.</p> <p>wrapscan, ws default: ws</p> <p>:   Searches using the regular expressions in addressing will wrap     around past the end of the file.</p> <p>wrapmargin, wm default: wm=0</p> <p>:   Defines a margin for automatic wrapover of text during input in     open and visual modes. See An Introduction to Text Editing with     Vi for details.</p> <p>writeany, wa default: nowa</p> <p>:   </p> <pre><code>Inhibit the checks normally made before *write* commands, allowing a\nwrite to any file which the system protection mechanism will allow.\n</code></pre>"},{"location":"software/ex.1.html#environment-variables","title":"ENVIRONMENT VARIABLES","text":"<p>The following environment variables affect the behaviour of ex:</p> <p>COLUMNS</p> <p>:   Overrides the system-supplied number of terminal columns.</p> <p>EXINIT</p> <p>:   Contains commands to execute at editor startup. If this variable is     present, the .exrc file in the user\\'s home directory is ignored.</p> <p>HOME</p> <p>:   Used to locate the editor startup file.</p> <p>LANG, LC_ALL</p> <p>:   See locale(7).</p> <p>LC_CTYPE</p> <p>:   Determines the mapping of bytes to characters, types of characters,     case conversion and composition of character classes in regular     expressions.</p> <p>LC_MESSAGES</p> <p>:   Sets the language used for diagnostic and informal messages.</p> <p>LINES</p> <p>:   Overrides the system-supplied number of terminal lines.</p> <p>NLSPATH</p> <p>:   See catopen(3).</p> <p>SHELL</p> <p>:   The program file used to execute external commands.</p> <p>TERM</p> <p>:   Determines the terminal type.</p>"},{"location":"software/ex.1.html#files","title":"FILES","text":"<p>/usr/libexec/expreserve</p> <p>:   preserve command</p> <p>/usr/libexec/exrecover</p> <p>:   recover command</p> <p>/etc/termcap</p> <p>:   describes capabilities of terminals</p> <p>\\$HOME/.exrc</p> <p>:   editor startup file</p> <p>/var/tmp/Exnnnnnnnnnn</p> <p>:   editor temporary</p> <p>/var/tmp/Rxnnnnnnnnnn</p> <p>:   named buffer temporary</p> <p>/var/preserve</p> <p>:   preservation directory</p>"},{"location":"software/ex.1.html#documentation","title":"DOCUMENTATION","text":"<p>The document Edit: A tutorial (USD:14) provides a comprehensive introduction to edit assuming no previous knowledge of computers or the</p> <p>system.</p> <p>The Ex Reference Manual -- Version 3.7 (USD:16) is a comprehensive and complete manual for the command mode features of ex. The</p> <p>section of this page is taken from the manual. For an introduction to more advanced forms of editing using the command mode of ex see the editing documents written by Brian Kernighan for the editor ed; the material in the introductory and advanced documents works also with ex.</p> <p>An Introduction to Display Editing with Vi (USD:15) introduces the display editor vi and provides reference material on vi. (This reference now forms the vi(1) manual page). In addition, the Vi Quick Reference card summarizes the commands of vi in a useful, functional way, and is useful with the Introduction.</p>"},{"location":"software/ex.1.html#see-also","title":"SEE ALSO","text":"<p>awk(1), ed(1), grep(1), sed(1), grep(1), vi(1), catopen(3), termcap(5), environ(7), locale(7), regex(7)</p>"},{"location":"software/ex.1.html#author","title":"AUTHOR","text":"<p>Originally written by William Joy.</p> <p>Mark Horton has maintained the editor since version 2.7, adding macros, support for many unusual terminals, and other features such as word abbreviation mode.</p> <p>This version incorporates changes by Gunnar Ritter.</p>"},{"location":"software/ex.1.html#notes","title":"NOTES","text":"<p>Undo never clears the buffer modified condition.</p> <p>The z command prints a number of logical rather than physical lines. More than a screen full of output may result if long lines are present.</p> <p>File input/output errors don\\'t print a name if the command line `-\\' option is used.</p> <p>The editor does not warn if text is placed in named buffers and not used before exiting the editor.</p> <p>Null (00) characters are converted to 0200 characters when reading input files, and cannot appear in resultant files.</p> <p>LC_COLLATE locales are ignored; collating symbols `[.c.]\\' and equivalence classes `[=c=]\\' in bracket expressions are recognized but useless since `c\\' is restricted to a single character and is the only character matched; range expressions `[a-m]\\' are always evaluated in byte order.</p>"},{"location":"software/heirloom-ex-vi.html","title":"heirloom-ex-vi","text":"<p>The GitHub repository  n-t-roff/heirloom-ex-vi used Gunnar Ritter's code  (The Traditional Vi) and add some improvements. The current version is 4.1.3 (14-JAN-2017)</p>"},{"location":"software/heirloom-ex-vi.html#local-copies-of-the-sources","title":"Local Copies of the Sources","text":"<ul> <li>heirloom-ex-vi-4.1.3.tar.gz</li> </ul>"},{"location":"software/termcap.html","title":"Termcap","text":""},{"location":"software/termcap.html#gnu-termcaptermutils","title":"GNU Termcap/Termutils","text":"<ul> <li>The Termcap Manual 2nd Ed. (December 1992)</li> <li>termcap-1.3.1.tar.gz (13-MAR-2002)</li> <li>termutils-2.0.tar.gz (01-DEC-1995)</li> </ul>"},{"location":"software/termcap.html#local-copies","title":"Local Copies","text":"<ul> <li>Manual (termcap.html) </li> <li>termcap-1.3.1.src   The file termcap.src from the archive termcap-1.3.1.tar.gz</li> <li>termcap-1.3.1.tar.gz</li> <li>termutils-2.0.tar.gz</li> </ul>"},{"location":"software/termcap.html#cygwin","title":"Cygwin","text":"<p>Part of the Cygwin release repository is the Cygwin termcap directory. In this directory you will finde the following files</p> <ul> <li>termcap-5.7_20091114-12.tar.bz2</li> <li>termcap-5.7_20091114-13.tar.bz2</li> <li>termcap-5.7_20091114-14.tar.bz2</li> </ul> <p>Each tar file contains the file /etc/termcap.</p>"},{"location":"software/termcap.html#local-copies-of-the-termcap-files","title":"Local Copies of the termcap Files","text":"<ul> <li>28-Nov-2009: termcap-5.7_20091114-12</li> <li>01-Dec-2009: termcap-5.7_20091114-13</li> <li>24-Mar-2010: termcap-5.7_20091114-14</li> </ul> <p>Older versions can be found in the Cygwin termcap legacy directory.</p>"},{"location":"software/vi.1.html","title":"NAME","text":"<p>vi, view, vedit - screen oriented (visual) display editor based on ex</p>"},{"location":"software/vi.1.html#synopsis","title":"SYNOPSIS","text":"<p>vi [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRV] [file ...]</p> <p>view [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRV] [file ...]</p> <p>vedit [-c command|+command] [-r [filename]] [-s|-] [-t tagstring] [-w size] [-lLRV] [file ...]\\</p>"},{"location":"software/vi.1.html#description","title":"DESCRIPTION","text":"<p>Vi (visual) is a display oriented text editor based on ex(1). Ex and vi run the same code; it is possible to get to the command mode of ex from within vi and vice-versa.</p> <p>The view command is identical to vi except that files are opened read-only. The vedit command is also identical, but sets some options to values more useful for novices.</p> <p>The following options are accepted:</p> <p>-c command or +command</p> <p>:   Execute command when editing begins.</p> <p>-l</p> <p>:   Start in a special mode useful for the Lisp programming language.</p> <p>-r [filename] or -L</p> <p>:   When no argument is supplied with this option, all files to be     recovered are listed and the editor exits immediately. If a     filename is specified, the corresponding temporary file is opened     in recovery mode.</p> <p>-R</p> <p>:   Files are opened read-only when this option is given.</p> <p>-s or -</p> <p>:   Script mode; all feedback for interactive editing is disabled.</p> <p>and .exrc files are not processed.</p> <p>-t tagstring</p> <p>:   Read the tags file, then choose the file and position specified by     tagstring for editing.</p> <p>-V</p> <p>:   Echo command input to standard error, unless it originates from a     terminal.</p> <p>-w size</p> <p>:   Specify the size of the editing window for visual mode.</p> <p>The Introduction to Display Editing with Vi provides full details on using vi.</p> <p>Most of the ex commands are available in visual mode when prefixed by a : character. See ex(1) for a description of them.</p> <p>The following gives the uses the editor makes of each character. The characters are presented in their order in the ASCII character set: Control characters come first, then most special characters, then the digits, upper and then lower case characters.</p> <p>For each character we tell a meaning it has as a command and any meaning it has during an insert. If it has only meaning as a command, then only this is discussed. Section numbers in parentheses indicate where the character is discussed in \"An Introduction to Display Editing with Vi\"; a `f\\' after the section number means that the character is mentioned in a footnote.</p> <p>\\^@</p> <p>:   Not a command character. If typed as the first character of an     insertion it is replaced with the last text inserted, and the insert     terminates. Only 128 characters are saved from the last insert; if     more characters were inserted the mechanism is not available. A     \\^@ cannot be part of the file due to the editor implementation     (7.5f).</p> <p>\\^A</p> <p>:   Unused.</p> <p>\\^B</p> <p>:   Backward window. A count specifies repetition. Two lines of     continuity are kept if possible (2.1, 6.1, 7.2).</p> <p>\\^C</p> <p>:   Unused.</p> <p>\\^D</p> <p>:   As a command, scrolls down a half-window of text. A count gives the     number of (logical) lines to scroll, and is remembered for future     \\^D and \\^U commands (2.1, 7.2). During an insert, backtabs     over autoindent white space at the beginning of a line (6.6, 7.5);     this white space cannot be backspaced over.</p> <p>\\^E</p> <p>:   Exposes one more line below the current screen in the file, leaving     the cursor where it is if possible.</p> <p>\\^F</p> <p>:   Forward window. A count specifies repetition. Two lines of     continuity are kept if possible (2.1, 6.1, 7.2).</p> <p>\\^G</p> <p>:   Equivalent to :fCR, printing the current file, whether it has     been modified, the current line number and the number of lines in     the file, and the percentage of the way through the file.</p> <p>\\^H (BS)</p> <p>:   Same as left arrow. (See h). During an insert, eliminates     the last input character, backing over it but not erasing it; it     remains so the user can see what he typed if he wishes to type     something only slightly different (3.1, 7.5).</p> <p>\\^I (TAB)</p> <p>:   Not a command character. When inserted it prints as some number of     spaces. When the cursor is at a tab character it rests at the last     of the spaces which represent the tab. The spacing of tabstops is     controlled by the tabstop option (4.1, 6.6).</p> <p>\\^J (LF)</p> <p>:   Same as down arrow (see j).</p> <p>\\^K</p> <p>:   Unused.</p> <p>\\^L</p> <p>:   The ASCII formfeed character, this causes the screen to be cleared     and redrawn. This is useful after a transmission error, if     characters typed by a program other than the editor scramble the     screen, or after output is stopped by an interrupt (5.4, 7.2f).</p> <p>\\^M (CR)</p> <p>:   A carriage return advances to the next line, at the first non-white     position in the line. Given a count, it advances that many lines     (2.3). During an insert, a CR causes the insert to continue onto     another line (3.1).</p> <p>\\^N</p> <p>:   Same as down arrow (see j).</p> <p>\\^O</p> <p>:   Unused.</p> <p>\\^P</p> <p>:   Same as up arrow (see k).</p> <p>\\^Q</p> <p>:   Not a command character. In input mode, \\^Q quotes the next     character, the same as \\^V , except that some teletype drivers     will eat the \\^Q so that the editor never sees it.</p> <p>\\^R</p> <p>:   Redraws the current screen, eliminating logical lines not     corresponding to physical lines (lines with only a single @     character on them). On hardcopy terminals in open mode, retypes     the current line (5.4, 7.2, 7.8).</p> <p>\\^S</p> <p>:   Unused. Some teletype drivers use \\^S to suspend output until     \\^Q is pressed.</p> <p>\\^T</p> <p>:   Not a command character. During an insert, with autoindent set and     at the beginning of the line, inserts shiftwidth white space.</p> <p>\\^U</p> <p>:   Scrolls the screen up, inverting \\^D which scrolls down. Counts     work as they do for \\^D, and the previous scroll amount is     common to both. On a dumb terminal, \\^U will often necessitate     clearing and redrawing the screen further back in the file (2.1,     7.2).</p> <p>\\^V</p> <p>:   Not a command character. In input mode, quotes the next character so     that it is possible to insert non-printing and special characters     into the file (4.2, 7.5).</p> <p>\\^W</p> <p>:   Not a command character. During an insert, backs up as b would     in command mode; the deleted characters remain on the display (see     \\^H) (7.5).</p> <p>\\^X</p> <p>:   Unused.</p> <p>\\^Y</p> <p>:   Exposes one more line above the current screen, leaving the cursor     where it is if possible. (No mnemonic value for this key; however,     it is next to \\^U which scrolls up a bunch.)</p> <p>\\^Z</p> <p>:   If supported by the Unix system, stops the editor, exiting to the     top level shell. Same as :stopCR. Otherwise, unused.</p> <p>\\^[ (ESC)</p> <p>:   Cancels a partially formed command, such as a z when no     following character has yet been given; terminates inputs on the     last line (read by commands such as : / and ?); ends     insertions of new text into the buffer. If an ESC is given when     quiescent in command state, the editor rings the bell or flashes the     screen. The user can thus hit ESC if he doesn\\'t know what is     happening till the editor rings the bell. If the user doesn\\'t know     whether he is in insert mode he can type ESCa, and then material     to be input; the material will be inserted correctly whether or not     he was in insert mode when he started (1.6, 3.1, 7.5).</p> <p>\\^\\</p> <p>:   Unused.</p> <p>\\^]</p> <p>:   Searches for the word which is after the cursor as a tag. Equivalent     to typing :ta, this word, and then a CR. Mnemonically, this     command is \" right to\" (7.3).</p> <p>\\^\\^</p> <p>:   Equivalent to :e #CR, returning to the previous position in the     last edited file, or editing a file which the user specified if he     got a `No write since last change diagnostic\\' and does not want to     have to type the file name again (7.3). (The user has to do a :w     before \\^\\^ will work in this case. If he does not wish to write     the file he should do :e! #CR instead.)</p> <p>\\^_</p> <p>:   Unused. Reserved as the command character for the Tektronix 4025 and     4027 terminal.</p> <p>SPACE</p> <p>:   Same as right arrow (see l).</p> <p>!</p> <p>:   An operator, which processes lines from the buffer with reformatting     commands. Follow ! with the object to be processed, and then the     command name terminated by CR. Doubling ! and preceding it by a     count causes count lines to be filtered; otherwise the count is     passed on to the object after the !. Thus 2!}fmtCR     reformats the next two paragraphs by running them through the     program fmt. If working on LISP, the command !%grindCR,     given at the beginning of a function, will run the text of the     function through the LISP grinder (6.7, 7.3). To read a file or the     output of a command into the buffer :r (7.3) can be used. To     simply execute a command, :! (7.3).</p> <p>Precedes a named buffer specification. There are named buffers 1-9 used for saving deleted text and named buffers a-z into which the user can place text (4.3, 6.3)</p> <p>#</p> <p>:   The macro character which, when followed by a number, will     substitute for a function key on terminals without function keys     (6.9). In input mode, if this is the erase character, it will delete     the last character typed in input mode, and must be preceded with a     \\ to insert it, since it normally backs over the last input     character.</p> <p>\\$</p> <p>:   Moves to the end of the current line. If the list option is set,     then the end of each line will be shown by printing a \\$ after     the end of the displayed text in the line. Given a count, advances     to the count\\'th following end of line; thus 2\\$ advances to the     end of the following line.</p> <p>%</p> <p>:   Moves to the parenthesis or brace { } which balances the     parenthesis or brace at the current cursor position.</p> <p>&amp;</p> <p>:   A synonym for :&amp;CR, by analogy with the ex &amp; command.</p> <p>\u00b4</p> <p>:   When followed by a \u00b4 returns to the previous context at the     beginning of a line. The previous context is set whenever the     current line is moved in a non-relative way. When followed by a     letter a-z, returns to the line which was marked with this     letter with a m command, at the first non-white character in the     line. (2.2, 5.3). When used with an operator such as d, the     operation takes place over complete lines; if ` is used, the     operation takes place from the exact marked place to the current     cursor position within the line.</p> <p>(</p> <p>:   Retreats to the beginning of a sentence, or to the beginning of a     LISP s-expression if the lisp option is set. A sentence ends at a     . ! or ? which is followed by either the end of a line or by     two spaces. Any number of closing ) ] \\\" and \u00b4 characters     may appear after the . ! or ?, and before the spaces or end     of line. Sentences also begin at paragraph and section boundaries     (see { and [[ below). A count advances that many sentences     (4.2, 6.8).</p> <p>)</p> <p>:   Advances to the beginning of a sentence. A count repeats the effect.     See ( above for the definition of a sentence (4.2, 6.8).</p> <p>*</p> <p>:   Unused.</p> <p>+</p> <p>:   Same as CR when used as a command.</p> <p>,</p> <p>:   Reverse of the last f F t or T command, looking the other     way in the current line. Especially useful after hitting too many     ; characters. A count repeats the search.</p> <p>-</p> <p>:   Retreats to the previous line at the first non-white character. This     is the inverse of + and RETURN. If the line moved to is not on     the screen, the screen is scrolled, or cleared and redrawn if this     is not possible. If a large amount of scrolling would be required     the screen is also cleared and redrawn, with the current line at the     center (2.3).</p> <p>.</p> <p>:   Repeats the last command which changed the buffer. Especially useful     when deleting words or lines; the user can delete some words/lines     and then hit . to delete more and more words/lines. Given a     count, it passes it on to the command being repeated. Thus after a     2dw, 3. deletes three words (3.3, 6.3, 7.2, 7.4).</p> <p>/</p> <p>:   Reads a string from the last line on the screen, and scans forward     for the next occurrence of this string. The normal input editing     sequences may be used during the input on the bottom line; an     returns to command state without ever searching. The search begins     when the user hits CR to terminate the pattern; the cursor moves to     the beginning of the last line to indicate that the search is in     progress; the search may then be terminated with a DEL or RUB, or by     backspacing when at the beginning of the bottom line, returning the     cursor to its initial position. Searches normally wrap end-around to     find a string anywhere in the buffer.</p> <pre><code>When used with an operator the enclosed region is normally affected.\nBy mentioning an offset from the line matched by the pattern the\nuser can force whole lines to be affected. To do this a pattern with\na closing a closing **/** and then an offset **+***n* or **-***n*\nmust be given.\n\nTo include the character **/** in the search string, it must be\nescaped with a preceding **\\\\**. A **\\^** at the beginning of the\npattern forces the match to occur at the beginning of a line only;\nthis speeds the search. A **\\$** at the end of the pattern forces\nthe match to occur at the end of a line only. More extended pattern\nmatching is available, see section 7.4; unless **nomagic** ist set\nin the *.exrc* file the user will have to preceed the characters **.\n\\[ \\*** and **\\~** in the search pattern with a **\\\\** to get them\nto work as one would naively expect (1.6, 2.2, 6.1, 7.2, 7.4).\n</code></pre> <p>0</p> <p>:   Moves to the first character on the current line. Also used, in     forming numbers, after an initial 1-9.</p> <p>1-9</p> <p>:   Used to form numeric arguments to commands (2.3, 7.2).</p> <p>:</p> <p>:   A prefix to a set of commands for file and option manipulation and     escapes to the system. Input is given on the bottom line and     terminated with an CR, and the command then executed. The user can     return to where he was by hitting DEL or RUB if he hit :     accidentally (see ex(1) and primarily 6.2 and 7.3).</p> <p>;</p> <p>:   Repeats the last single character find which used f F t or     T. A count iterates the basic scan (4.1).</p> <p>\\&lt;</p> <p>:   An operator which shifts lines left one shiftwidth, normally 8     spaces. Like all operators, affects lines when repeated, as in     \\&lt;\\&lt;. Counts are passed through to the basic object, thus     3\\&lt;\\&lt; shifts three lines (6.6, 7.2).</p> <p>=</p> <p>:   Reindents line for LISP, as though they were typed in with lisp     and autoindent set (6.8).</p> <p>&gt;</p> <p>:   An operator which shifts lines right one shiftwidth, normally 8     spaces. Affects lines when repeated as in &gt;&gt;. Counts repeat     the basic object (6.6, 7.2).</p> <p>?</p> <p>:   Scans backwards, the opposite of /. See the / description     above for details on scanning (2.2, 6.1, 7.4).</p> <p>@</p> <p>:   A macro character (6.9). If this is the kill character, it must be     escaped with a \\ to type it in during input mode, as it normally     backs over the input given on the current line (3.1, 3.4, 7.5).</p> <p>A</p> <p>:   Appends at the end of line, a synonym for \\$a (7.2).</p> <p>B</p> <p>:   Backs up a word, where words are composed of non-blank sequences,     placing the cursor at the beginning of the word. A count repeats the     effect (2.4).</p> <p>C</p> <p>:   Changes the rest of the text on the current line; a synonym for     c\\$.</p> <p>D</p> <p>:   Deletes the rest of the text on the current line; a synonym for     d\\$.</p> <p>E</p> <p>:   Moves forward to the end of a word, defined as blanks and     non-blanks, like B and W. A count repeats the effect.</p> <p>F</p> <p>:   Finds a single following character, backwards in the current line. A     count repeats this search that many times (4.1).</p> <p>G</p> <p>:   Goes to the line number given as preceding argument, or the end of     the file if no preceding count is given. The screen is redrawn with     the new current line in the center if necessary (7.2).</p> <p>H</p> <p>:   Home arrow. Homes the cursor to the top line on the screen. If a     count is given, then the cursor is moved to the count\\'th line on     the screen. In any case the cursor is moved to the first non-white     character on the line. If used as the target of an operator, full     lines are affected (2.3, 3.2).</p> <p>I</p> <p>:   Inserts at the beginning of a line; a synonym for \\^i.</p> <p>J</p> <p>:   Joins together lines, supplying appropriate white space: one space     between words, two spaces after a ., and no spaces at all if the     first character of the joined on line is ). A count causes that     many lines to be joined rather than the default two (6.5, 7.1f).</p> <p>K</p> <p>:   Unused.</p> <p>L</p> <p>:   Moves the cursor to the first non-white character of the last line     on the screen. With a count, to the first non-white of the count\\'th     line from the bottom. Operators affect whole lines when used with     L (2.3).</p> <p>M</p> <p>:   Moves the cursor to the middle line on the screen, at the first     non-white position on the line (2.3).</p> <p>N</p> <p>:   Scans for the next match of the last pattern given to / or     ?, but in the reverse direction; this is the reverse of n.</p> <p>O</p> <p>:   Opens a new line above the current line and inputs text there up to     an ESC. A count can be used on dumb terminals to specify a number of     lines to be opened; this is generally obsolete, as the slowopen     option works better (3.1).</p> <p>P</p> <p>:   Puts the last deleted text back before/above the cursor. The text     goes back as whole lines above the cursor if it was deleted as whole     lines. Otherwise the text is inserted between the characters before     and at the cursor. May be preceded by a named buffer specification     \\\"x to retrieve the contents of the buffer; buffers     1-9 contain deleted material, buffers a-z are     available for general use (6.3).</p> <p>Q</p> <p>:   Quits from vi to ex command mode. In this mode, whole lines form     commands, ending with a RETURN. One can give all the : commands;     the editor supplies the : as a prompt (7.7).</p> <p>R</p> <p>:   Replaces characters on the screen with characters typed (overlay     fashion). Terminates with an ESC.</p> <p>S</p> <p>:   Changes whole lines, a synonym for cc. A count substitutes for     that many lines. The lines are saved in the numeric buffers, and     erased on the screen before the substitution begins.</p> <p>T</p> <p>:   Takes a single following character, locates the character before the     cursor in the current line, and places the cursor just after that     character. A count repeats the effect. Most useful with operators     such as d (4.1).</p> <p>U</p> <p>:   Restores the current line to its state before the user started     changing it (3.5).</p> <p>V</p> <p>:   Unused.</p> <p>W</p> <p>:   Moves forward to the beginning of a word in the current line, where     words are defined as sequences of blank/non-blank characters. A     count repeats the effect (2.4).</p> <p>X</p> <p>:   Deletes the character before the cursor. A count repeats the effect,     but only characters on the current line are deleted.</p> <p>Y</p> <p>:   Yanks a copy of the current line into the unnamed buffer, to be put     back by a later p or P; a very useful synonym for yy. A     count yanks that many lines. May be preceded by a buffer name to put     lines in that buffer (7.4).</p> <p>ZZ</p> <p>:   Exits the editor. (Same as :xCR.) If any changes have been made,     the buffer is written out to the current file. Then the editor     quits.</p> <p>[[</p> <p>:   Backs up to the previous section boundary. A section begins at each     macro in the sections option, normally a `.NH\\' or `.SH\\' and     also at lines which which start with a formfeed \\^L. Lines     beginning with { also stop [[; this makes it useful for     looking backwards, a function at a time, in C programs. If the     option lisp is set, stops at each ( at the beginning of a     line, and is thus useful for moving backwards at the top level LISP     objects. (4.2, 6.1, 6.6, 7.2).</p> <p>\\</p> <p>:   Unused.</p> <p>]]</p> <p>:   Forward to a section boundary, see [[ for a definition (4.2,     6.1, 6.6, 7.2).</p> <p>\\^</p> <p>:   Moves to the first non-white position on the current line (4.4).</p> <p>_</p> <p>:   Unused.</p> <p>`</p> <p>:   When followed by a ` returns to the previous context. The     previous context is set whenever the current line is moved in a     non-relative way. When followed by a letter a-z, returns to     the position which was marked with this letter with a m command.     When used with an operator such as d, the operation takes place     from the exact marked place to the current position within the line;     if using \u00b4, the operation takes place over complete lines (2.2,     5.3).</p> <p>a</p> <p>:   Appends arbitrary text after the current cursor position; the insert     can continue onto multiple lines by using RETURN within the insert.     A count causes the inserted text to be replicated, but only if the     inserted text is all on one line. The insertion terminates with an     ESC (3.1, 7.2).</p> <p>b</p> <p>:   Backs up to the beginning of a word in the current line. A word is a     sequence of alphanumerics, or a sequence of special characters. A     count repeats the effect (2.4).</p> <p>c</p> <p>:   An operator which changes the following object, replacing it with     the following input text up to an ESC. If more than part of a single     line is affected, the text which is changed away is saved in the     numeric named buffers. If only part of the current line is affected,     then the last character to be changed away is marked with a \\$.     A count causes that many objects to be affected, thus both 3c)     and c3) change the following three sentences (7.4).</p> <p>d</p> <p>:   An operator which deletes the following object. If more than part of     a line is affected, the text is saved in the numeric buffers. A     count causes that many objects to be affected; thus 3dw is the     same as d3w (3.3, 3.4, 4.1, 7.4).</p> <p>e</p> <p>:   Advances to the end of the next word, defined as for b and     w. A count repeats the effect (2.4, 3.1).</p> <p>f</p> <p>:   Finds the first instance of the next character following the cursor     on the current line. A count repeats the find (4.1).</p> <p>g</p> <p>:   Unused.</p> <p>Arrow keys h, j, k, l, and H.</p> <p>h</p> <p>:   Left arrow . Moves the cursor one character to the left. Like     the other arrow keys, either h, the left arrow key, or one     of the synonyms (\\^H) has the same effect. A count repeats the     effect (3.1, 7.5).</p> <p>i</p> <p>:   Inserts text before the cursor, otherwise like a (7.2).</p> <p>j</p> <p>:   Down arrow . Moves the cursor one line down in the same column.     If the position does not exist, vi comes as close as possible to     the same column. Synonyms include \\^J (linefeed) and \\^N .</p> <p>k</p> <p>:   Up arrow . Moves the cursor one line up. \\^P is a synonym.</p> <p>l</p> <p>:   Right arrow . Moves the cursor one character to the right. SPACE     is a synonym.</p> <p>m</p> <p>:   Marks the current position of the cursor in the mark register which     is specified by the next character a-z. The user can return     to this position or use it with an operator using ` or \u00b4     (5.3).</p> <p>n</p> <p>:   Repeats the last / or ? scanning commands (2.2).</p> <p>o</p> <p>:   Opens new lines below the current line; otherwise like O (3.1).</p> <p>p</p> <p>:   Puts text after/below the cursor; otherwise like P (6.3).</p> <p>q</p> <p>:   Unused.</p> <p>r</p> <p>:   Replaces the single character at the cursor with a single character     typed. The new character may be a RETURN; this is the easiest way to     split lines. A count replaces each of the following count characters     with the single character given; see R above which is the more     usually useful iteration of r (3.2).</p> <p>s</p> <p>:   Changes the single character under the cursor to the text which     follows up to an ESC; given a count, that many characters from the     current line are changed. The last character to be changed is marked     with \\$ as in c (3.2).</p> <p>t</p> <p>:   Advances the cursor upto the character before the next character     typed. Most useful with operators such as d and c to delete     the characters up to a following character. One can use . to     delete more if this doesn\\'t delete enough the first time (4.1).</p> <p>u</p> <p>:   Undoes the last change made to the current buffer. If repeated, will     alternate between these two states, thus is its own inverse. When     used after an insert which inserted text on more than one line, the     lines are saved in the numeric named buffers (3.5).</p> <p>v</p> <p>:   Unused.</p> <p>w</p> <p>:   Advances to the beginning of the next word, as defined by b     (2.4).</p> <p>x</p> <p>:   Deletes the single character under the cursor. With a count deletes     deletes that many characters forward from the cursor position, but     only on the current line (6.5).</p> <p>y</p> <p>:   An operator, yanks the following object into the unnamed temporary     buffer. If preceded by a named buffer specification, \\\"x, the     text is placed in that buffer also. Text can be recovered by a later     p or P (7.4).</p> <p>z</p> <p>:   Redraws the screen with the current line placed as specified by the     following character: RETURN specifies the top of the screen, .     the center of the screen, and - at the bottom of the screen. A     count may be given after the z and before the following     character to specify the new screen size for the redraw. A count     before the z gives the number of the line to place in the center     of the screen instead of the default current line. (5.4)</p> <p>{</p> <p>:   Retreats to the beginning of the beginning of the preceding     paragraph. A paragraph begins at each macro in the paragraphs     option, normally `.IP\\', `.LP\\', `.PP\\', `.QP\\' and `.bp\\'. A     paragraph also begins after a completely empty line, and at each     section boundary (see [[ above) (4.2, 6.8, 7.6).</p> <p>|</p> <p>:   Places the cursor on the character in the column specified by the     count (7.1, 7.2).</p> <p>}</p> <p>:   Advances to the beginning of the next paragraph. See { for the     definition of paragraph (4.2, 6.8, 7.6).</p> <p>\\~</p> <p>:   Switches the case of the given count of characters starting from the     current cursor position to the end of the current line.     Non-alphabetic characters remain unchanged.</p> <p>\\^? (DEL)</p> <p>:   Interrupts the editor, returning it to command accepting state (1.6,     7.5).</p>"},{"location":"software/vi.1.html#environment-variables","title":"ENVIRONMENT VARIABLES","text":"<p>The following environment variables affect the behaviour of vi:</p> <p>COLUMNS</p> <p>:   Overrides the system-supplied number of terminal columns.</p> <p>EXINIT</p> <p>:   Contains commands to execute at editor startup. If this variable is     present, the .exrc file in the user\\'s home directory is ignored.</p> <p>HOME</p> <p>:   Used to locate the editor startup file.</p> <p>LANG, LC_ALL</p> <p>:   See locale(7).</p> <p>LC_CTYPE</p> <p>:   Determines the mapping of bytes to characters, types of characters,     case conversion and composition of character classes in regular     expressions.</p> <p>LC_MESSAGES</p> <p>:   Sets the language used for diagnostic and informal messages.</p> <p>LINES</p> <p>:   Overrides the system-supplied number of terminal lines.</p> <p>NLSPATH</p> <p>:   See catopen(3).</p> <p>SHELL</p> <p>:   The program file used to execute external commands.</p> <p>TERM</p> <p>:   Determines the terminal type.</p>"},{"location":"software/vi.1.html#files","title":"FILES","text":"<p>/usr/libexec/expreserve</p> <p>:   preserve command</p> <p>/usr/libexec/exrecover</p> <p>:   recover command</p> <p>/etc/termcap</p> <p>:   describes capabilities of terminals</p> <p>\\$HOME/.exrc</p> <p>:   editor startup file</p> <p>/var/tmp/Exnnnnnnnnnn</p> <p>:   editor temporary</p> <p>/var/tmp/Rxnnnnnnnnnn</p> <p>:   named buffer temporary</p> <p>/var/preserve</p> <p>:   preservation directory</p>"},{"location":"software/vi.1.html#see-also","title":"SEE ALSO","text":"<p>ex(1), edit(1), \"Vi Quick Reference\" card, \"An Introduction to Display Editing with Vi\".</p>"},{"location":"software/vi.1.html#author","title":"AUTHOR","text":"<p>William Joy.</p> <p>Mark Horton added macros to visual mode and was maintaining version 3.</p> <p>This version incorporates changes by Gunnar Ritter.</p>"},{"location":"software/vi.1.html#notes","title":"NOTES","text":"<p>Software tabs using \\^T work only immediately after the autoindent.</p> <p>Left and right shifts on intelligent terminals don\\'t make use of insert and delete character operations in the terminal.</p> <p>The wrapmargin option can be fooled since it looks at output columns when blanks are typed. If a long word passes through the margin and onto the next line without a break, then the line won\\'t be broken.</p> <p>Insert/delete within a line can be slow if tabs are present on intelligent terminals, since the terminals need help in doing this correctly.</p> <p>The source command does not work when executed as :source; there is no way to use the :append, :change, and :insert commands, since it is not possible to give more than one line of input to a : escape. To use these on a :global one must Q to ex command mode, execute them, and then reenter the screen editor with vi or open.</p>"}]}